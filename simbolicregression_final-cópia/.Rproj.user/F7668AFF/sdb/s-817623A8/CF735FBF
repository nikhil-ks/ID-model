{
    "collab_server" : "",
    "contents" : "RLParametrosModelo2 <- function(Y, X) {\n\n  #  Modelo2 -- Distribuição TriangularSimetrica\n  #  Y -- Variável Resposta\n  #         Y -> yc,yr\n  #  X -- p Variáveis Explicativas\n  #         X -> xc1,xr1,xc2,xr2,...,xcp,xrp\n\n  ################################################################################################################################\n\n  Y <- as.matrix(Y)\n  X <- as.matrix(X)\n\n  Yc <- as.matrix(Y[, 1])                                      #matriz com os centros da variável resposta\n  Yr <- as.matrix(Y[, 2])                                      #matriz com os raios da variável resposta\n  Xc <- as.matrix(X[, seq(from = 1, to = ncol(X), by = 2)])    #matriz com os centros das variaveis explicativas\n  Xr <- as.matrix(X[, seq(from = 2, to = ncol(X), by = 2)])    #matriz com os raios das variáveis explicativas\n  p  <- ncol(Xc)                                                #número de variáveis\n\n  ################################################################################################################################\n\n  NHhessianaBlocoI <- function(Y, X) {\n\n    H   <- matrix(0, p * 2, p * 2)\n    Xcc <- crossprod(Xc)\n    Xrr <- crossprod(Xr)\n\n    for(k in 1:(p * 2)) {\n      for(l in 1:(p * 2)) {\n        if(k %% 2 != 0) {\n          H <- H\n        } else if(l %% 2 != 0) {\n          H <- H\n        }else {\n          H[k, l]     <-  2 * Xcc[k/2, l/2] + 1/3 * Xrr[k/2, l/2]\n          H[k-1, l-1] <-  2 * Xcc[k/2, l/2] + 1/3 * Xrr[k/2, l/2]\n          H[k-1, l]   <-  -2 * Xcc[k/2, l/2] + 1/3 * Xrr[k/2, l/2]\n          H[k, l-1]   <-  -2 * Xcc[k/2, l/2] + 1/3 * Xrr[k/2, l/2]\n        }\n      }\n    }\n\n    H <- round(H, 2)\n\n    return(H)\n  }\n\n  H1 <- NHhessianaBlocoI(Y, X)\n\n  ################################################################################################################################\n\n  NHhessianaBlocoLinha <- function(Y, X) {\n\n    HA <- matrix(0, 1, p * 2)\n\n    for(l in 1:(p * 2)) {\n      if(l %% 2 != 0) {\n        HA <- HA\n      } else {\n        HA[, l]   <- -2 * sum(Xc[, l/2])\n        HA[, l-1] <- 2 * sum(Xc[, l/2])\n      }\n    }\n\n    HA <- list(\"down\" = HA , \"side\" = t(HA) , \"constante\" = nrow(Xc) * 2)\n    return(HA)\n  }\n\n  HA <- NHhessianaBlocoLinha(Y, X)\n\n  ################################################################################################################################\n\n  NHhessiana <- function(Y, X) {\n\n    NH <- cbind(rbind(H1, HA$down), rbind(HA$side, HA$constante))\n\n    return(NH)\n  }\n\n  H <- NHhessiana(Y, X)\n\n  ################################################################################################################################\n\n  NHfuncao <- function(Y, X) {\n\n    Hf  <- matrix(0, p * 2, 1)                             #matriz hessianafuncaoI preenchida com zeros\n    Cf  <- matrix(0, 1, 1)\n    YXc <- matrix(0, p, 1)\n    YXr <- matrix(0, p, 1)\n\n    for(i in 1:p) {\n      YXc[i, 1] <- crossprod(Yc[, 1], Xc[, i])\n      YXr[i, 1] <- crossprod(Yr[, 1], Xr[, i])\n    }\n\n    for(l in 1:p * 2) {\n      if(l %% 2 != 0) {\n        Hf <- Hf\n      } else {\n        Hf[l, ]   <- 2 * YXc[l/2, ] - 1/3 * YXr[l/2, ]\n        Hf[l-1, ] <- -2 * YXc[l/2, ] - 1/3 * YXr[l/2, ]\n      }\n    }\n\n    Cf[1, 1] <- -2 * sum(Yc)\n    w1       <- rbind(Hf, Cf)\n\n    return(w1)\n  }\n\n  F <- NHfuncao(Y, X) * (-1)\n\n  ################################################################################################################################\n\n  library(\"quadprog\")\n\n  A <- matrix(0, p * 2, p * 2)\n\n  diag(A) <- 1\n\n  A <- rbind(A, matrix(0, 1, p * 2))\n\n  b <- matrix(0, p * 2, 1)\n\n  RL <- solve.QP(H, F, A, b)\n\n  return(RL$solution)\n\n}\n",
    "created" : 1502575495877.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3638779211",
    "id" : "CF735FBF",
    "lastKnownWriteTime" : 1498415232,
    "last_content_update" : 1498415232,
    "path" : "D:/Users/pjmalaquias/Desktop/simbolicregression/R/Modelo_DTriangularSimetrica.R",
    "project_path" : "R/Modelo_DTriangularSimetrica.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}